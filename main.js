!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleLikeCard=r,this._handleDeleteCard=i,this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._trashButton=this._cardElement.querySelector("#card-trash-bin-button"),this._cardElement.querySelector(".card__title").textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._updateLikeStatus(),this._setEventListeners()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getCardId(){return this._id}_updateLikeStatus(){this._likeButton.classList.toggle("card__like-button_active",this.isLiked)}setCardLikes(e){this.isLiked=e,this._updateLikeStatus()}removeCard(){this._cardElement.remove(),this._cardElement=null}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._trashButton.addEventListener("click",(()=>{this._handleDeleteButton()}))}_handleLikeButton(){this._handleLikeCard(this)}_handleDeleteButton(){this._handleDeleteCard&&this._handleDeleteCard(this)}getView(){return this.setCardLikes(this.isLiked),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListerners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListerners()}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}}class s{constructor(e){this._modalElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modalElement.querySelector(".modal__close").addEventListener("click",(()=>this.close())),this._modalElement.addEventListener("click",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._modalForm=this._modalElement.querySelector(".modal__form"),this._inputList=this._modalForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t,this._submitButton=this._modalForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}getInputValues(){return this._getInputValues()}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const i=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkRequest(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}async _request(e,t){const s=await fetch(e,t);return this._checkRequest(s)}getCardsAndUserInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}updateProfileInfo(e,t){const s=`${this._baseUrl}/users/me`,r={method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})};return console.log("URL:",s),console.log("Options:",r),this._request(s,r)}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}createNewCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}dislikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"5457953a-b073-4cb8-8a6a-6ab24a852af5","Content-Type":"application/json"}}),n=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-edit-modal"),o=a.querySelector("#modal-title-input"),l=a.querySelector("#modal-description-input"),d=document.querySelector(".profile__avatar-edit-button"),c=document.querySelector(".profile__add-button"),h=document.forms["add-card-form"],u=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e){Array.isArray(e)?(this._items=e,this._items.forEach((e=>{this._renderer(e)}))):console.error("Items is not an array:",e)}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>{const t=k(e);u.addItem(t)}},".cards__list");i.getCardsAndUserInfo().then((e=>{let[t,s]=e;console.log("User Data:",s),console.log("Cards Data:",t),_.setUserInfo({title:s.name,description:s.about}),_.changeAvatar(s.avatar),t&&Array.isArray(t)?u.renderItems(t):console.error("cardsData is not an array or undefined:",t)})).catch((e=>console.log(`Failed to load data: ${e}`)));const _=new class{constructor(e){let{titleSelector:t,descriptionSelector:s,avtarSelector:r}=e;this._titleElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{title:this._titleElement.textContent,description:this._descriptionElement.textContent}}setUserInfo(e){let{title:t,description:s}=e;this._titleElement.textContent=t,this._descriptionElement.textContent=s}changeAvatar(e){this._avatarElement.src=e}}({titleSelector:".profile__title",descriptionSelector:".profile__description",avtarSelector:".profile__image"}),m=new r("#add-card-modal",(e=>{var t;m.renderLoading(!0),t=e,C((async()=>{const e=k(await i.createNewCard({name:t.title,link:t.url}));u.addItem(e),h.reset()}),m)}));m.setEventListeners();const p=new r("#profile-edit-modal",(e=>{var t;p.renderLoading(!0),t=e,C((async()=>{const e=await i.updateProfileInfo(t.title,t.description);_.setUserInfo({title:e.name,description:e.about})}),p)}));p.setEventListeners();const E=new class extends s{constructor(e){super(e),this._image=this._modalElement.querySelector(".modal__preview-image"),this._caption=this._modalElement.querySelector(".modal__caption")}open(e){let{name:t,link:s}=e;this._image.src=s,this._image.alt=t,this._caption.textContent=t,super.open()}}("#preview-image-modal");E.setEventListeners();const v=new r("#profile-avatar-modal",(e=>{v.renderLoading(!0),i.updateAvatar(e.url).then((e=>{_.changeAvatar(e.avatar),v.close()})).catch((e=>console.error("Error updating profile image:",e))).finally((()=>{v.renderLoading(!1)}))}));v.setEventListeners();const g=new class extends s{constructor(e){super(e),this._modalForm=this._modalElement.querySelector(".modal__form"),this._modalSubmitButton=this._modalElement.querySelector(".modal__button-confirm")}setDeleteConfirmation(e){this._handleFormSubmit=e}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}}("#delete-card-confirm-modal");g.setEventListeners();const L={};var b;function C(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}b={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(".modal__form")).forEach((e=>{const s=new t(b,e),r=e.getAttribute("name");L[r]=s,s.enableValidation()}));const S=(e,t)=>{E.open({name:e,link:t})};function f(e){g.open(),g.setDeleteConfirmation((()=>i.deleteCard(e.getCardId()).then((()=>{g.close(),e.removeCard()})).catch(console.error)))}function y(e){return e.isLiked?i.dislikeCard(e.getCardId()).then((()=>{e.setCardLikes(!1)})).catch((e=>console.error("Failed to dislike card:",e))):i.likeCard(e.getCardId()).then((()=>{e.setCardLikes(!0)})).catch(console.error)}function k(t){return new e(t,"#card-template",S,y,f).getView()}c.addEventListener("click",(()=>{m.open(),L["add-card-modal-form"].resetValidation()})),d.addEventListener("click",(()=>{v.open(),L["update-avatar-modal-form"].resetValidation()})),n.addEventListener("click",(()=>{L["profile-edit-modal-form"].resetValidation();const e=_.getUserInfo();o.value=e.title||"",l.value=e.description||"",p.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,